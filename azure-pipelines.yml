trigger:
  batch: true
  branches:
    include:
    - '*'

pr:
  branches:
    include:
      - '*'

pool:
  vmImage: macOS-latest

variables:
  BuildConfiguration: Release
  TestProjects: src/**/*.Test.csproj
  UwpSampleProjects: src/AssetMan.Sample/*/*.UWP.csproj
  AndroidSampleProjects: src/AssetMan.Sample/*/*.Android.csproj
  iOSSampleProjects: src/AssetMan.Sample/*/*.iOS.csproj
  ArtifactName: AssetMan
  NugetFeed: AssetMan
  DotnetVersion: 2.2.401
  NugetVersion: '5.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 'true'

steps:
- task: UseDotNet@2
  displayName: Use dotnet $(DotnetVersion)
  inputs:
    packageType: sdk
    version: $(DotnetVersion)

- script: dotnet tool install -g nbgv
  displayName: Install nbgv tool

- script: nbgv cloud
  displayName: Set version in cloud environment

- pwsh: |
    ./Build-NugetPackage.ps1 `
        -Configuration $(BuildConfiguration) `
        -OutputDirectory '$(Build.ArtifactStagingDirectory)'
  displayName: Pack nuget packages

- task: MSBuild@1
  displayName: Build UWP sample projects
  inputs:
      solution: $(UwpSampleProjects)
      configuration: $(BuildConfiguration)
      msbuildArguments: '/t:Restore,Build'

- task: XamarinAndroid@1
  displayName: Build Android sample projects
  inputs:
    configuration: $(BuildConfiguration)
    projectFile: $(AndroidSampleProjects)

- task: XamariniOS@2
  displayName: Build iOS sample projects
  inputs:
    configuration: $(BuildConfiguration)
    buildForSimulator: true
    solutionFile: $(iOSSampleProjects)

# Run all tests with "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    arguments: '--configuration $(BuildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Include="[AssetMan.*]*" /p:IncludeTestAssembly=true'
    projects: $(TestProjects)
    nobuild: true

# Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
# First install the tool on the machine, then run it
- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator -reports:./src/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura
  displayName: Create Code coverage report

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

- task: NuGetCommand@2
  displayName: Push nuget packages
  inputs:
    command: 'push'
    feedsToUse: 'select'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: $(NugetFeed)
    versioningScheme: 'off'

- task: PublishSymbols@2
  inputs:
    SearchPattern: '**/bin/**/*.pdb'
    SymbolServerType: 'TeamServices'

- task: PublishPipelineArtifact@0
  displayName: Publish artifacts
  inputs:
    artifactName: $(ArtifactName)
    targetPath: '$(Build.ArtifactStagingDirectory)'
