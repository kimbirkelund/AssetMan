trigger:
  batch: true
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

pr:
  branches:
    include:
      - '*'

variables:
  BuildConfiguration: Release
  IosPlatform: iPhoneSimulator
  TestProjects: src/**/*.Test.csproj
  AndroidProject: src/**/*.Android.csproj
  IosProject: src/**/*.iOS.csproj
  
  ArtifactName: AssetMan
  NugetFeed: 'a009aa0f-b984-4f75-9908-96c2ba08e2ec/32936a78-ced4-48b3-b7e3-3c17135dfe30' # oss feed
  Dotnet6Version: 6.x
  NugetVersion: '6.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 'true'

  NugetArtifactName: nupkg

stages:
- stage: Build_nuget_package
  jobs:
  - job: Build_nuget_package
    timeoutInMinutes: 15
    pool:
      vmImage: windows-latest

    steps:
    - script: nbgv cloud
      displayName: Set version in cloud environment

    - pwsh: |
        ./ci/Build-NugetPackage.ps1 `
            -Configuration $(BuildConfiguration) `
            -OutputDirectory '$(Build.ArtifactStagingDirectory)'
      displayName: Pack nuget packages

    - publish: '$(Build.ArtifactStagingDirectory)'
      displayName: Publish nupkg as artifact
      artifact: $(NugetArtifactName)

- stage: Run_tests
  jobs:
  - job: Unit_test
    timeoutInMinutes: 15
    strategy:
      matrix:
        dotnet6:
          DotnetVersion: $(Dotnet6Version)

    pool:
      vmImage: windows-latest

    steps:
    - task: UseDotNet@2
      displayName: Use dotnet $(DotnetVersion)
      inputs:
        packageType: sdk
        version: $(DotnetVersion)

    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        arguments: --configuration $(BuildConfiguration)
        projects: $(TestProjects)

  - job: Integration_test_Android
    timeoutInMinutes: 15
    strategy:
      matrix:
        dotnet6:
          DotnetVersion: $(Dotnet6Version)

    pool:
      vmImage: macos-latest

    steps:
    - task: UseDotNet@2
      displayName: Use dotnet $(DotnetVersion)
      inputs:
        packageType: sdk
        version: $(DotnetVersion)

    - task: NuGetToolInstaller@0
      displayName: Install nuget $(NugetVersion)
      inputs:
        versionSpec: $(NugetVersion)

    - download: current
      displayName: Download nupkg artifact
      artifact: '$(NugetArtifactName)'

    - pwsh: ./ci/Rewrite-ToUseNugetPackage.ps1 -NupkgPath "$(Pipeline.Workspace)/$(NugetArtifactName)" -ProjectFile "$(AndroidProject)" -Verbose
      displayName: Rewrite project file

    - pwsh: Get-ChildItem -Recurse "$(AndroidProject)" |% { msbuild /t:Restore $_ }
      displayName: Restore packages

    - task: XamarinAndroid@1
      displayName: Build Android app
      inputs:
        projectFile: $(AndroidProject)
        configuration: $(BuildConfiguration)
        createAppPackage: true
        msbuildVersionOption: 'latest'

    - pwsh: |
        $results = Get-ChildItem -Recurse "$(AndroidProject)" |
            Split-Path -Parent |
            ForEach-Object {
                $path = Join-Path $_ "obj" "$(BuildConfiguration)";
                Write-Host "path: $path";
                Write-Host "list: $(Get-ChildItem $path)"

                return Get-ChildItem `
                    -Path $path `
                    -Filter logo.png `
                    -Recurse
            }

        Write-Output "Results: $results";
        if (!$results)
        {
            Write-Error "AssetMan didn't run as expected. Resources not found in output."
        }
      displayName: Assert build succeeded
      continueOnError: false

  - job: Integration_test_iOS
    timeoutInMinutes: 15
    strategy:
      matrix:
        dotnet6:
          DotnetVersion: $(Dotnet6Version)

    pool:
      vmImage: macos-latest

    steps:
    - task: UseDotNet@2
      displayName: Use dotnet $(DotnetVersion)
      inputs:
        packageType: sdk
        version: $(DotnetVersion)

    - task: NuGetToolInstaller@0
      displayName: Install nuget $(NugetVersion)
      inputs:
        versionSpec: $(NugetVersion)

    - download: current
      displayName: Download nupkg artifact
      artifact: '$(NugetArtifactName)'

    - pwsh: ./ci/Rewrite-ToUseNugetPackage.ps1 -NupkgPath "$(Pipeline.Workspace)/$(NugetArtifactName)" -ProjectFile "$(IosProject)" -Verbose
      displayName: Rewrite project file

    - pwsh: Get-ChildItem -Recurse "$(IosProject)" |% { msbuild /t:Restore $_ }
      displayName: Restore packages

    - task: XamariniOS@2
      displayName: Build iOS app
      inputs:
        solutionFile: $(IosProject)
        configuration: $(BuildConfiguration)
        packageApp: false
        buildForSimulator: true
        args: /verbosity:diag

    - pwsh: |
        $results = Get-ChildItem -Recurse "$(IosProject)" |
            Split-Path -Parent |
            ForEach-Object {
                $path = Join-Path $_ "obj";
                Write-Host "path: $path";
                Write-Host "list: $(Get-ChildItem $path -Recurse)"

                return Get-ChildItem -Recurse |
                  Select-String "logo.png" |
                  Select-Object "Path";
            }

        Write-Output "Results: $results";
        if (!$results)
        {
            Write-Error "AssetMan didn't run as expected. Resources not found in output."
        }
      displayName: Assert build succeeded
      continueOnError: false

- stage: Publish_nuget_package
  jobs:
  - job: Publish_nuget_package
    timeoutInMinutes: 15
    pool:
      vmImage: windows-latest

    steps:
    - task: NuGetToolInstaller@0
      displayName: Install nuget $(NugetVersion)
      inputs:
        versionSpec: $(NugetVersion)

    - download: current
      displayName: Download nupkg artifact
      artifact: '$(NugetArtifactName)'

    - task: NuGetCommand@2
      displayName: Push nuget packages
      inputs:
        command: 'push'
        feedsToUse: 'select'
        packagesToPush: '$(Pipeline.Workspace)/$(NugetArtifactName)/**/*.nupkg;!$(Pipeline.Workspace)/$(NugetArtifactName)/**/*.symbols.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: $(NugetFeed)
        versioningScheme: 'off'

    - task: NuGetCommand@2
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/$(NugetArtifactName)/**/*.nupkg;!$(Pipeline.Workspace)/$(NugetArtifactName)/**/*.symbols.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'nuget - AssetMan* packages'

    - task: PublishSymbols@2
      inputs:
        SearchPattern: '**/bin/**/*.pdb'
        SymbolServerType: 'TeamServices'

    - task: PublishPipelineArtifact@0
      displayName: Publish artifacts
      inputs:
        artifactName: $(ArtifactName)
        targetPath: '$(Build.ArtifactStagingDirectory)'
